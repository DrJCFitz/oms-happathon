/**
 * Each section of the site has its own module. It probably also has
 * submodules, though this boilerplate is too simple to demonstrate it. Within
 * `src/app/home`, however, could exist several additional folders representing
 * additional modules that would then be listed as dependencies of this one.
 * For example, a `note` section could have the submodules `note.create`,
 * `note.delete`, `note.edit`, etc.
 *
 * Regardless, so long as dependencies are managed correctly, the build process
 * will automatically take take of the rest.
 *
 * The dependencies block here is also where component dependencies should be
 * specified, as shown below.
 */

/* globals angular */

// angular.module( 'app.holon.somerville', [
//   'ui.router'
// ])

/**
 * Each section or module of the site can also have its own routes. AngularJS
 * will handle ensuring they are all available at run-time, but splitting it
 * this way makes each module more "self-contained".
 */
// .config(['$stateProvider','$urlRouterProvider', function config( $stateProvider , $urlRouterProvider) {
//   $stateProvider.state('app.holon.somerville', {
//       url:'/holon/{communityName}',
//       templateUrl: function($stateParams){
//         var url = 'default-communities/'+
//                 $stateParams.communityName+
//                 '/'+
//                 $stateParams.communityName+
//                 '.tpl.html';
//         // $stateProvider.$log(url);
//         return url;
        
//       },
//       data:{pageTitle:'Community'}
//     });
//   // $urlRouterProvider.otherwise();
// }])

/**
 * And of course we define a controller for our route.
 */
// .controller( 'CommunityCtrl', ['$scope', function CommunityCtrl ( $scope ) {
//   $scope.foo=1;
// }]);
